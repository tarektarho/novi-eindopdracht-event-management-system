package nl.novi.event_management_system.services;import jakarta.transaction.Transactional;import nl.novi.event_management_system.dtos.RoleDTO;import nl.novi.event_management_system.dtos.UserDTO;import nl.novi.event_management_system.exceptions.RecordNotFoundException;import nl.novi.event_management_system.exceptions.UsernameNotFoundException;import nl.novi.event_management_system.mappers.UserMapper;import nl.novi.event_management_system.models.Role;import nl.novi.event_management_system.models.User;import nl.novi.event_management_system.repositories.UserRepository;import nl.novi.event_management_system.utils.PasswordGenerator;import nl.novi.event_management_system.utils.RandomStringGenerator;import org.springframework.stereotype.Service;import java.util.ArrayList;import java.util.List;import java.util.Set;@Servicepublic class UserService {    private final UserRepository userRepository;    public UserService(UserRepository userRepository) {        this.userRepository = userRepository;    }    public List<UserDTO> getUsers() {        List<UserDTO> collection = new ArrayList<>();        List<User> list = userRepository.findAll();        for (User user : list) {            collection.add(UserMapper.fromUser(user));        }        return collection;    }    /**     * This method is annotated with @Transactional, which means that the method will be executed within a transaction.     * This method retrieves a user from the database by username.     * @param username The username of the user to retrieve.     * @return A UserDTO object.     *     * @throws UsernameNotFoundException Thrown when the user is not found in the database.     */    @Transactional    public UserDTO getUser(String username) {        User user = userRepository.findById(username)                .orElseThrow(() -> new UsernameNotFoundException(username));        return UserMapper.fromUser(user);    }    public boolean userExists(String username) {        return userRepository.existsById(username);    }    public String createUser(UserDTO userDto) {        String randomString = RandomStringGenerator.generateAlphaNumeric(20);        userDto.setApikey(randomString);        String encryptedPwd = PasswordGenerator.generateEncryptedPassword(userDto.getPassword());        userDto.setPassword(encryptedPwd);        User newUser = userRepository.save(UserMapper.toUser(userDto));        return newUser.getUsername();    }    public void deleteUser(String username) {        userRepository.deleteById(username);    }    public void updateUser(String username, UserDTO newUser) {        if (!userRepository.existsById(username)) throw new RecordNotFoundException("User not found for username: " + username);        User user = userRepository.findById(username).get();        String encryptedPwd = PasswordGenerator.generateEncryptedPassword(newUser.getPassword());        user.setPassword(encryptedPwd);        userRepository.save(user);    }    public Set<Role> getRoles(String username) {        if (!userRepository.existsById(username)) throw new UsernameNotFoundException(username);        User user = userRepository.findById(username).get();        UserDTO userDto = UserMapper.fromUser(user);        return userDto.getRoles();    }    public void addRole(String username, String role) {        if (!userRepository.existsById(username)) throw new UsernameNotFoundException(username);        User user = userRepository.findById(username).get();        // Create a new Role object and add it to the user's roles        Role newRole = new Role(username, role);        // Add the role to the existing roles set        user.getRoles().add(newRole);        userRepository.save(user);    }    public void removeRole(String username, String role) {        if (!userRepository.existsById(username)) throw new UsernameNotFoundException(username);        User user = userRepository.findById(username).get();        Role roleToRemove = user.getRoles().stream().filter((a) -> a.getRole().equalsIgnoreCase(role)).findAny().get();        user.removeRole(roleToRemove);        userRepository.save(user);    }}